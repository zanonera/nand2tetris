// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	ALU(x=toALUx ,y=toALUy ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=aluFdbck ,zr=zeroALU ,ng=negALU);
	
	
	// Load to register A
	Not(in=instruction[15], out=opcodeA);
	Or(a=instruction[5], b=opcodeA, out=loadA);
	
	// Load to register D
	And(a=instruction[15], b=instruction[4], out=loadD);

	ARegister(in=toAreg ,load=loadA ,out=AtoMux, out=AtoPC, out[0..14]=addressM);
	DRegister(in=aluFdbck ,load=loadD ,out=toALUx);
	
	Mux16(a=instruction ,b=aluFdbck ,sel=instruction[15] ,out=toAreg);
	Mux16(a=AtoMux ,b=inM ,sel=instruction[12] ,out=toALUy);
	
	// Jump decoder
	// Jump when JMP is selected -> sel=111
	DMux8Way(in=true ,sel=instruction[0..2] ,a=pcInc ,b=JGT ,c=JEQ ,d=JGE ,e=JLT ,f=JNE ,g=JLE ,h=JMP);
	//Jump if: Greater than zero
	Not(in=negALU, out=notNeg);
	And(a=JGT, b=notNeg, out=noNeg);
	And(a=noNeg, b=notZero, out=jump1);
	// Jump if: Equals to zero
	And(a=JEQ, b=zeroALU, out=jump2);
	//Jump if: Greater or equals to zero
	Or(a=zeroALU, b=notNeg, out=ge);
	And(a=JGE, b=ge, out=jump3);
	// Jump if: Bellow zero
	And(a=JLT, b=negALU, out=jump4);
	// Jump if: Not zero
	Not(in=zeroALU, out=notZero);
	And(a=JNE, b=notZero, out=jump5);
	// Jump if: Less or equal to zero
	Or(a=zeroALU, b=negALU, out=le);
	And(a=JLE, b=le, out=jump6);
	Or8Way(in[0]=false, in[1]=jump1, in[2]=jump2, in[3]=jump3, in[4]=jump4, in[5]=jump5, in[6]=jump6, in[7]=JMP ,out=jumpor);
	// Only jumps when its a C instruction
	And(a=jumpor, b=instruction[15], out=jump);
	
	PC(in=AtoPC ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc);
	
	// Only writes  to data memory when the instruction is of C type
	And(a=instruction[15], b=instruction[3], out=writeM);
}

/*
C instruction
1 X X a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
A instruction
0 15_bit_value
*/